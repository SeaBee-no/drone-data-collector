# Generated by Django 3.2 on 2023-02-15 09:49

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_minio_backend.models
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ddc_upload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flight_mission_guid', models.CharField(blank=True, max_length=300, null=True, unique=True, verbose_name='Dronelogbook Id')),
                ('mosaiced_image', models.FileField(blank=True, null=True, storage=django_minio_backend.models.MinioBackend(bucket_name='geoviz-upload-data'), upload_to=django_minio_backend.models.iso_date_prefix, verbose_name='Upload single mosaiced file')),
                ('row_image', models.FileField(blank=True, null=True, storage=django_minio_backend.models.MinioBackend(bucket_name='geoviz-upload-data'), upload_to=django_minio_backend.models.iso_date_prefix, verbose_name='Upload raw images a single .zip file')),
                ('ground_control_point', models.FileField(blank=True, null=True, storage=django_minio_backend.models.MinioBackend(bucket_name='geoviz-upload-data'), upload_to=django_minio_backend.models.iso_date_prefix, verbose_name='Upload ground control point as .csv')),
                ('ground_truth_point', models.FileField(blank=True, null=True, storage=django_minio_backend.models.MinioBackend(bucket_name='geoviz-upload-data'), upload_to=django_minio_backend.models.iso_date_prefix, verbose_name='Upload ground truth point as .csv')),
                ('dronePath', models.FileField(blank=True, null=True, storage=django_minio_backend.models.MinioBackend(bucket_name='geoviz-upload-data'), upload_to=django_minio_backend.models.iso_date_prefix, verbose_name='Upload drone path file as .kml')),
            ],
            options={
                'verbose_name_plural': 'Seabee bucket',
            },
        ),
        migrations.CreateModel(
            name='Historicalddc_upload',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('flight_mission_guid', models.CharField(blank=True, db_index=True, max_length=300, null=True, verbose_name='Dronelogbook Id')),
                ('mosaiced_image', models.TextField(blank=True, max_length=100, null=True, verbose_name='Upload single mosaiced file')),
                ('row_image', models.TextField(blank=True, max_length=100, null=True, verbose_name='Upload raw images a single .zip file')),
                ('ground_control_point', models.TextField(blank=True, max_length=100, null=True, verbose_name='Upload ground control point as .csv')),
                ('ground_truth_point', models.TextField(blank=True, max_length=100, null=True, verbose_name='Upload ground truth point as .csv')),
                ('dronePath', models.TextField(blank=True, max_length=100, null=True, verbose_name='Upload drone path file as .kml')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ddc_upload',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Historicalddc_main',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('flight_mission_guid', models.CharField(blank=True, db_index=True, max_length=300, null=True, verbose_name='Dronelogbook Id')),
                ('flight_mission_name', models.CharField(blank=True, max_length=300, null=True, verbose_name='Flight Mission Name')),
                ('drone_type', models.CharField(max_length=300, verbose_name='Drone Type')),
                ('image_overlap', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image Overlap')),
                ('cdom', models.PositiveIntegerField(blank=True, null=True, verbose_name='Cdom– ug/l Quinine sulphate (0-500 -upper figure is a maximum guess and should be adjustable)')),
                ('turbidity', models.PositiveIntegerField(blank=True, null=True, verbose_name='Turbidity- FNU (0-100)')),
                ('salinity', models.PositiveIntegerField(blank=True, null=True, verbose_name='Salinity- PSU (0-40)')),
                ('water_temperature', models.PositiveIntegerField(blank=True, null=True, verbose_name='Water Temperature (1.7C – 35C)')),
                ('secchi_depth', models.PositiveIntegerField(blank=True, null=True, verbose_name='Secchi Depth (metres)')),
                ('sensor_dates_last_calibration', models.DateField(blank=True, null=True, verbose_name='Dates of last calibration')),
                ('sensor_dates_last_maintenance', models.DateField(blank=True, null=True, verbose_name='Dates of last maintenance')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ddc_main',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ddc_main',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flight_mission_guid', models.CharField(blank=True, max_length=300, null=True, unique=True, verbose_name='Dronelogbook Id')),
                ('flight_mission_name', models.CharField(blank=True, max_length=300, null=True, verbose_name='Flight Mission Name')),
                ('drone_type', models.CharField(max_length=300, verbose_name='Drone Type')),
                ('image_overlap', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image Overlap')),
                ('cdom', models.PositiveIntegerField(blank=True, null=True, verbose_name='Cdom– ug/l Quinine sulphate (0-500 -upper figure is a maximum guess and should be adjustable)')),
                ('turbidity', models.PositiveIntegerField(blank=True, null=True, verbose_name='Turbidity- FNU (0-100)')),
                ('salinity', models.PositiveIntegerField(blank=True, null=True, verbose_name='Salinity- PSU (0-40)')),
                ('water_temperature', models.PositiveIntegerField(blank=True, null=True, verbose_name='Water Temperature (1.7C – 35C)')),
                ('secchi_depth', models.PositiveIntegerField(blank=True, null=True, verbose_name='Secchi Depth (metres)')),
                ('sensor_dates_last_calibration', models.DateField(blank=True, null=True, verbose_name='Dates of last calibration')),
                ('sensor_dates_last_maintenance', models.DateField(blank=True, null=True, verbose_name='Dates of last maintenance')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ddc_for_metadata', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Dronelogbook additional parameter',
            },
        ),
    ]
